#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;  //diffuse texture
uniform sampler2D second_texture;  //specular texture
uniform sampler2D third_texture;  //overlay diffuse texture for mud

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;
uniform Light worldLight;
//shininess - Phong equation exponent. The smaller the shinier
struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

vec3 calcLight(Light light, vec3 aNormal, vec3 mixed){
  vec3 ambient = light.ambient * mixed;

  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * mixed;

  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(third_texture, aTexCoord));

  vec3 result = ambient + diffuse + specular;
  return result;
}

void main() {
  vec3 mixed = vec3(mix(texture(first_texture, aTexCoord),
                       texture(second_texture, aTexCoord), 0.25f).rgb);

  vec3 output1 = vec3(0.0f);
  output1 += calcLight(light, aNormal, mixed);
  output1 += calcLight(worldLight, aNormal, mixed);
  fragColor = vec4(output1, 1.0f);


}


