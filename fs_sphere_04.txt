#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;  //diffuse texture
uniform sampler2D second_texture;  //overlay diffuse texture for mud
uniform sampler2D third_texture;  //specular texture

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;
//shininess - Phong equation exponent. The smaller the shinier
struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  /**
  * Tasks:
  * 1. mix snow with mud
  * 2. apply Blinn-Phong lighting
  */
  /*
  //experimental, no specular lighting
  vec3 mixed = vec3(mix(texture(first_texture, aTexCoord),
                       texture(second_texture, aTexCoord), 0.2f).rgb);
  fragColor = mixed;
  */

  vec3 mixed = vec3(mix(texture(first_texture, aTexCoord),
                       texture(second_texture, aTexCoord), 0.3f).rgb);

  vec3 ambient = light.ambient * mixed; 

  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * mixed;

  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(third_texture, aTexCoord));

  vec3 result = ambient + diffuse + specular;
  fragColor = vec4(result, 1.0f);

  /*  
  //default
  // ambient
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse - Lambertian reflectance
  // diffuse = normal_vector * light_vector * material_diffuse_rgb * light_diffuse_rgb
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord)); 
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(third_texture, aTexCoord));

  vec3 result = ambient + diffuse + specular;

  fragColor = vec4(result, 1.0);
  */
  
  
  
}